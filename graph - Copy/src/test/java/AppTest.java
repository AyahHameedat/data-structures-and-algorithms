/*
 * This Java source file was generated by the Gradle 'init' task.
 */
import org.junit.Test;

import java.util.*;

import static org.junit.Assert.*;

public class AppTest {
    @Test public void testAppHasAGreeting() {
        App classUnderTest = new App();
        assertNotNull("app should have a greeting", classUnderTest.getGreeting());
    }


    @Test
    public void emptyGraph()
    {
        Graph graph = new Graph();


        String exp = "";
        String res = graph.printGraph();
        assertEquals(exp, res);
    }

    @Test
    public void addVertexTest()
    {
        Graph graph = new Graph();

        graph.addVertex("A");
        graph.addVertex("B");
        graph.addVertex("C");

        String exp = "Vertex{data='A'weight='0'}[]Vertex{data='B'weight='0'}[]Vertex{data='C'weight='0'}[]";
        String res = graph.printGraph();
        assertEquals(exp, res);
    }

    @Test
    public void addEdgesTest()
    {
        Graph graph = new Graph();

        graph.addVertex("A");
        graph.addVertex("B");
        graph.addVertex("C");

        graph.addEdges("A","B",1);
        graph.addEdges("B","C",2);
        graph.addEdges("A","C",3);

        String exp = "Vertex{data='A'weight='0'}[Vertex{data='B'weight='1'}, Vertex{data='C'weight='3'}]Vertex{data='B'weight='0'}[Vertex{data='A'weight='1'}, Vertex{data='C'weight='2'}]Vertex{data='C'weight='0'}[Vertex{data='B'weight='2'}, Vertex{data='A'weight='3'}]";
        String res = graph.printGraph();
        assertEquals(exp, res);
    }


    @Test
    public void getVerticesTest()
    {
        Graph graph = new Graph();

        graph.addVertex("A");
        graph.addVertex("B");
        graph.addVertex("C");

        graph.addEdges("A","B",1);
        graph.addEdges("B","C",2);
        graph.addEdges("A","C",3);

        String exp = "[Vertex{data='A'weight='0'}, [Vertex{data='B'weight='1'}, Vertex{data='C'weight='3'}], Vertex{data='B'weight='0'}, [Vertex{data='A'weight='1'}, Vertex{data='C'weight='2'}], Vertex{data='C'weight='0'}, [Vertex{data='B'weight='2'}, Vertex{data='A'weight='3'}]]";
        List res = graph.getVertices();
        assertEquals(exp, res.toString());
    }

    @Test
    public void getNeighborsTest()
    {
        Graph graph = new Graph();

        graph.addVertex("A");
        graph.addVertex("B");
        graph.addVertex("C");

        graph.addEdges("A","B",1);
        graph.addEdges("B","C",2);
        graph.addEdges("A","C",3);

        String exp = "[Vertex{data='B'weight='1'}, Vertex{data='C'weight='3'}]";
        List<Vertex> res = graph.getNeighbors("A");

        assertEquals(exp, res.toString());
    }


    @Test
    public void getSizeTest()
    {
        Graph graph = new Graph();

        graph.addVertex("A");
        graph.addVertex("B");
        graph.addVertex("C");

        graph.addEdges("A","B",1);
        graph.addEdges("B","C",2);
        graph.addEdges("A","C",3);

        String exp = "3";
        int res = graph.getSize();
        assertEquals(exp, String.valueOf(res));
    }



    @Test
    public void BFSTest()
    {
        Graph graph = new Graph();

        graph.addVertex("Pandora");
        graph.addVertex("Arendelle");
        graph.addVertex("Metroville");
        graph.addVertex("Monstroplolis");
        graph.addVertex("Narnia");
        graph.addVertex("Naboo");



        graph.addEdges("Pandora","Arendelle",1);
        graph.addEdges("Arendelle","Metroville",2);
        graph.addEdges("Arendelle","Monstroplolis",3);
        graph.addEdges("Metroville","Narnia",3);
        graph.addEdges("Metroville","Naboo",3);
        graph.addEdges("Monstroplolis","Naboo",3);


        String expected = "[Pandora, Arendelle, Metroville, Monstroplolis, Narnia, Naboo]";
        Set result = graph.bfs("Pandora");
        assertEquals(expected, result.toString());
    }



    @Test
    public void testBusinessTrip(){
        App app = new App();
        Graph citiesGraph = new Graph();
        citiesGraph.addVertex("Pandora");
        citiesGraph.addVertex("Arendelle");
        citiesGraph.addVertex("Metroville");
        citiesGraph.addVertex("Monstroplolis");
        citiesGraph.addVertex("Narnia");
        citiesGraph.addVertex("Naboo");

        citiesGraph.addEdges("Pandora","Arendelle",150);
        citiesGraph.addEdges("Arendelle","Metroville",99);
        citiesGraph.addEdges("Arendelle","Monstroplolis",42);
        citiesGraph.addEdges("Metroville","Narnia", 37);
        citiesGraph.addEdges("Metroville","Pandora", 82);
        citiesGraph.addEdges("Metroville","Naboo", 26);
        citiesGraph.addEdges("Monstroplolis","Metroville", 105);
        citiesGraph.addEdges("Monstroplolis","Naboo", 73);
        citiesGraph.addEdges("Naboo","Narnia", 250);

        List<String> citiesArr = new ArrayList<>();
        citiesArr.add("Metroville");
        citiesArr.add("Pandora");

        List<String> citiesArr2 = new ArrayList<>();
        citiesArr2.add("Arendelle");
        citiesArr2.add("Monstroplolis");
        citiesArr2.add("Naboo");


        List<String> citiesArr3 = new ArrayList<>();
        citiesArr3.add("Naboo");
        citiesArr3.add("Pandora");

        List<String> citiesArr4 = new ArrayList<>();

        Integer a = 82;
        Integer b = 115;
        Integer c = 0;
        Integer d = 0;

        assertEquals(a, app.businessTrip(citiesGraph, citiesArr));
        assertEquals(b, app.businessTrip(citiesGraph, citiesArr2));
        assertEquals(c, app.businessTrip(citiesGraph, citiesArr3));
        assertEquals(d, app.businessTrip(citiesGraph, citiesArr4));
    }



    @Test
    public void testDepthFirstTraverse(){
        App app = new App();
        Graph graph = new Graph();
        graph.addVertex("A");
        graph.addVertex("B");
        graph.addVertex("C");
        graph.addVertex("D");
        graph.addVertex("E");
        graph.addVertex("F");
        graph.addVertex("G");
        graph.addVertex("H");

        graph.addEdges("A","D");
        graph.addEdges("A","B");
        graph.addEdges("B","D");
        graph.addEdges("B","C");
        graph.addEdges("C","G");
        graph.addEdges("D","F");
        graph.addEdges("D","H");
        graph.addEdges("D","E");
        graph.addEdges("F","H");

        List<String> list = new ArrayList<>();
        list.add("A");
        list.add("B");
        list.add("C");
        list.add("G");
        list.add("D");
        list.add("E");
        list.add("H");
        list.add("F");

        Set<String> result = graph.depthFirstTraverse("A");

        assertTrue(result.contains(list.get(0)));
        assertTrue(result.contains(list.get(1)));
        assertTrue(result.contains(list.get(2)));
        assertTrue(result.contains(list.get(3)));
        assertTrue(result.contains(list.get(4)));
        assertTrue(result.contains(list.get(5)));
        assertTrue(result.contains(list.get(6)));
        assertTrue(result.contains(list.get(7)));
    }

}
