import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {
    public String getGreeting() {
        return "Hello world.";
    }
    private Integer Cost = 0;

    public static void main(String[] args) {

        System.out.println(new App().getGreeting());


        Graph graph = new Graph();
//        Pandora, Arendelle, Metroville, Monstroplolis, Narnia, Naboo

        graph.addVertex("Pandora");
        graph.addVertex("Arendelle");
        graph.addVertex("Metroville");
        graph.addVertex("Monstroplolis");
        graph.addVertex("Narnia");
        graph.addVertex("Naboo");


        System.out.println("------------------------------------------------------------------------");
        System.out.println(graph.printGraph());


        graph.addEdges("Pandora", "Arendelle", 1);
        graph.addEdges("Arendelle", "Metroville", 2);
        graph.addEdges("Arendelle", "Monstroplolis", 3);
        graph.addEdges("Metroville", "Narnia", 3);
        graph.addEdges("Metroville", "Naboo", 3);
        graph.addEdges("Monstroplolis", "Naboo", 3);

        System.out.println("------------------------------------------------------------------------");
        System.out.println(graph.printGraph());


        System.out.println("----------------------------------------------------------------------");
        System.out.println(graph.getVertices());


        System.out.println("-----------------------------------------------------------------------");
        System.out.println(graph.getNeighbors("Pandora"));


        System.out.println("-----------------------------------------------------------------------");
        System.out.println(graph.getSize());


        System.out.println("---------- Code Challenge 36 -------------");
        System.out.println(graph.bfs("Pandora"));


        App app = new App();

        Graph citiesGraph = new Graph();
        citiesGraph.addVertex("Pandora");
        citiesGraph.addVertex("Arendelle");
        citiesGraph.addVertex("Metroville");
        citiesGraph.addVertex("Monstroplolis");
        citiesGraph.addVertex("Narnia");
        citiesGraph.addVertex("Naboo");

        citiesGraph.addEdges("Pandora","Arendelle",150);
        citiesGraph.addEdges("Arendelle","Metroville",99);
        citiesGraph.addEdges("Arendelle","Monstroplolis",42);
        citiesGraph.addEdges("Metroville","Narnia", 37);
        citiesGraph.addEdges("Metroville","Pandora", 82);
        citiesGraph.addEdges("Metroville","Naboo", 26);
        citiesGraph.addEdges("Monstroplolis","Metroville", 105);
        citiesGraph.addEdges("Monstroplolis","Naboo", 73);
        citiesGraph.addEdges("Naboo","Narnia", 250);

        List<String> citiesArr = new ArrayList<>();
        citiesArr.add("Metroville");
        citiesArr.add("Pandora");

        System.out.println(app.businessTrip(citiesGraph, citiesArr));

        List<String> citiesArr2 = new ArrayList<>();
        citiesArr2.add("Arendelle");
        citiesArr2.add("Monstroplolis");
        citiesArr2.add("Naboo");

        System.out.println(app.businessTrip(citiesGraph, citiesArr2));

        List<String> citiesArr3 = new ArrayList<>();
        citiesArr3.add("Naboo");
        citiesArr3.add("Pandora");

        System.out.println(app.businessTrip(citiesGraph, citiesArr3));


        System.out.println("---------------------------------CC38---------------------------------");

        System.out.println(graph.depthFirstTraverse("Pandora"));

    }



    // get the weight of edge between two nodes
    public Integer businessTrip(Graph graph, List<String> cities){
        Cost = 0;
        int citiesSize = cities.size();

        for (int i = 0; i < citiesSize; i ++){
            if (i + 1 >= citiesSize){
                break;
            }
            trips(cities.get(i), cities.get(i + 1), graph);
        }

        return Cost;
    }


    private void trips(String city1, String city2, Graph graph){
        if (graph.getNeighbors(city1) == null){
            return;
        }
        for (Vertex ver: graph.getNeighbors(city1)) {
            if (Objects.equals(city2, ver.data)){
                Cost += ver.weight;
                break;
            }
        }
    }


}
