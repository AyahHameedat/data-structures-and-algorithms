/*
 * This Java source file was generated by the Gradle 'init' task.
 */
import data.BTNode;
import org.junit.Test;
import org.w3c.dom.ls.LSException;
import structure.BinaryTree;
import structure.HashMap;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import static org.junit.Assert.*;

public class AppTest {
    @Test
    public void testAppHasAGreeting() {
        App classUnderTest = new App();
        assertNotNull("app should have a greeting", classUnderTest.getGreeting());
    }


    @Test
    public void SettingValuesKeys() {

        HashMap<String, String> hashMap = new HashMap<>();
        hashMap.set("JAVA", "JAVA");
        hashMap.set("Amman", "Amman");
        hashMap.set("Jordan", "Jordan");
        hashMap.set("J", "J");
        hashMap.set("Bob", "Bob");
        hashMap.set("Carl", "Carl");

        int result = 6;
        int expected = hashMap.getSize();

        assertEquals(expected, result);

    }


    @Test
    public void returnKeys() {

        HashMap<String, String> hashMap = new HashMap<>();
        hashMap.set("JAVA", "JAVA");
        hashMap.set("Amman", "Amman");
        hashMap.set("Jordan", "Jordan");
        hashMap.set("J", "J");
        hashMap.set("Bob", "Bob");
        hashMap.set("Carl", "Carl");

        String result = "[Jordan, Amman, JAVA, J, Bob, Carl]";
        String expected = hashMap.getKeys().toString();

        assertEquals(expected, result);

    }

    @Test
    public void returnNullKey() {

        HashMap<String, String> hashMap = new HashMap<>();
        hashMap.set("JAVA", "JAVA");
        hashMap.set("Amman", "Amman");
        hashMap.set("Jordan", "Jordan");
        hashMap.set("J", "J");
        hashMap.set("Bob", "Bob");
        hashMap.set("Carl", "Carl");

//        String result = null ;
        String expected = hashMap.get("aya");

        assertEquals(expected, null);

    }


    @Test
    public void containKeys() {

        HashMap<String, String> hashMap = new HashMap<>();
        hashMap.set("JAVA", "JAVA");
        hashMap.set("Amman", "Amman");
        hashMap.set("Jordan", "Jordan");
        hashMap.set("J", "J");
        hashMap.set("Bob", "Bob");
        hashMap.set("Carl", "Carl");

        boolean result = true;
        boolean expected = hashMap.contain("JAVA");

        assertEquals(expected, result);

    }


    @Test
    public void containNoKeys() {

        HashMap<String, String> hashMap = new HashMap<>();
        hashMap.set("JAVA", "JAVA");
        hashMap.set("Amman", "Amman");
        hashMap.set("Jordan", "Jordan");
        hashMap.set("J", "J");
        hashMap.set("Bob", "Bob");
        hashMap.set("Carl", "Carl");

        boolean result = false;
        boolean expected = hashMap.contain("aya");

        assertEquals(expected, result);

    }


    @Test
    public void hashKeys() {

        HashMap<String, String> hashMap = new HashMap<>();
        hashMap.set("JAVA", "JAVA");

        int result = 187265416;
        int expected = hashMap.hashCode();

        assertEquals(expected, result);

    }


    @Test
    public void repeatedWord() {

        HashMap<String, String> hashMap = new HashMap<>();

        String result = "a";
        String expected = hashMap.repeatedWord("Once upon a time, there was a brave princess who...");

        assertEquals(expected, result);

    }


    @Test
    public void noRepeatedWord() {

        HashMap<String, String> hashMap = new HashMap<>();

        String result = "no repeated word";
        String expected = hashMap.repeatedWord("Once ayah sleep");

        assertEquals(expected, result);

    }


    @Test
    public void emptyTreeTest() {

        HashMap<String, String> hashMap = new HashMap<>();

        BinaryTree<Integer> BinTree1 = new BinaryTree<>();



        BinaryTree<Integer> BinTree2 = new BinaryTree<>();

        String result = null;

        List expected = hashMap.treeIntersection(BinTree1, BinTree2);

        assertEquals(expected, result);


    }

    @Test
    public void treeTest() {

        HashMap<String, String> hashMap = new HashMap<>();

        BinaryTree<Integer> BinTree1 = new BinaryTree<>();
        BinTree1.setRoot(new BTNode(15));

        BinTree1.getRoot().setLeft(new BTNode(8));
        BinTree1.getRoot().setRight(new BTNode(20));

        BinTree1.getRoot().getRight().setRight(new BTNode(35));
        BinTree1.getRoot().getRight().setLeft(new BTNode(22));



        BinaryTree<Integer> BinTree2 = new BinaryTree<>();
        BinTree2.setRoot(new BTNode(20));

        BinTree2.getRoot().setLeft(new BTNode(8));
        BinTree2.getRoot().setRight(new BTNode(20));

        BinTree2.getRoot().getRight().setRight(new BTNode(35));
        BinTree2.getRoot().getRight().setLeft(new BTNode(62));

        List<Integer> result =new ArrayList<>();
        result.add(8);
        result.add(20);
        result.add(35);

        List expected = hashMap.treeIntersection(BinTree1, BinTree2);

        assertEquals(expected, result);


    }
}
